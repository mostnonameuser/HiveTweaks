#!/usr/bin/env bash

if [[ -z $RIG_CONF ]]; then #reread env variables as after upgrade this can be empty
	source /etc/environment
	export $(cat /etc/environment | grep -vE '^$|^#' | cut -d= -f1) #export all variables from file
fi

. colors

export DISPLAY=":0"

#AUTOFAN_LOG="/var/log/hive-autofan.log"

#Must be empty in release
DEBUG_COMMANDS=

#MIN_COEF=80
#MAX_COEF=100
#SLEEP_TIME=20
DEF_SLEEP_TIME=5


#######################################################################
#settings (for autofan.conf without DEF_), default values
#target GPU temperature
DEF_TARGET_TEMP=
#minimal fan speed
DEF_MIN_FAN=30
#maximum fan speed
DEF_MAX_FAN=100
#temperature to stop miner
DEF_CRITICAL_TEMP=90
#action on reaching critical temp. "" to stop mining, reboot, shutdown
DEF_CRITICAL_TEMP_ACTION=
#AMD fan control (AMD control enable-0/AMD control disable-1)
DEF_NO_AMD=0
#Reboot rig if GPU error (enable-1/disable-0)
DEF_REBOOT_ON_ERROR=0
#######################################################################



#we will restart miner only it was stopped by this script
miner_stopped_by_overheat=0
#flag that the message was sent
unable_to_set_fan_speed=0
#flag if we met 511, 460, etc
temperature_is_unreal=0
#unparsable data
error_in_temp_readings=0


###
# Log write
function echo2 {
	#echo -e "$1" > /dev/tty1
	#echo -e "$1" >> $AUTOFAN_LOG
	echo -e "$1"
}


#check $GPU_DETECT_JSON and do nothing while not exist
while true; do 
	if [ -f $GPU_DETECT_JSON ]; then
		gpu_detect_json=`cat $GPU_DETECT_JSON`
		# TODO this block must be refactored to library functions
		amd_indexes_query='[ . | to_entries[] | select(.value.brand == "amd") | .key ]'
		amd_indexes_array=`echo "$gpu_detect_json" | jq -r "$amd_indexes_query | .[]"`
		amd_cards_number=`echo "$gpu_detect_json" | jq -c "$amd_indexes_query | length"`

		nvidia_indexes_query='[ . | to_entries[] | select(.value.brand == "nvidia") | .key ]'
		nvidia_indexes_array=`echo "$gpu_detect_json" | jq -r "$nvidia_indexes_query| .[]"`
		nvidia_cards_number=`echo "$gpu_detect_json" | jq -c "$nvidia_indexes_query | length"`

		# TODO cpus maybe required to use autofans too
		#cpu_indexes_query='[ . | to_entries[] | select(.value.brand == "cpu") | .key ]'
		#cpu_indexes_array=`echo "$gpu_detect_json" | jq -r "$cpu_indexes_query"`
		#cpu_cores_number=`echo "$gpu_detect_json" | jq -c "$cpu_indexes_query | length"`
		declare -a card_bus_ids_array=(`echo "$gpu_detect_json" | jq -r '[ . | to_entries[] | select(.value) | .value.busid ] | .[]'`)
		# TODO There is must be the way to remove space or use the whole value inside the quotes
		#declare -a card_names_array=(`echo "$gpu_detect_json" | jq '[ . | to_entries[] | select(.value) | .value.name ] | .[]'`)
		
		#set AMD $cardnum array
		if [[ $amd_cards_number > 0 ]]; then
			cardnum=()
			for j in ${amd_indexes_array[@]}
			do
				#get bus_id amd gpu
				cardnum_bus_id=${card_bus_ids_array[j]}
				dirs=`ls -d1 /sys/class/drm/card*/device/pp_table | sort --version-sort` #natural sort for 10+ cards
				[[ -z $dirs ]] && break
				for dir in $dirs; do
					basedir=${dir%/*} #cut off /pp_table
					busid_dirs=`cat $basedir/uevent | grep PCI_SLOT_NAME | awk -F= '{print substr($2,6)}'`
					if [[ $busid_dirs == $cardnum_bus_id ]]; then
						[[ $dir =~ \/card([0-9a-z]+)\/ ]]
						cardnum[$j]=${BASH_REMATCH[1]}
					fi
				done
			done
		fi
		break
	else
		echo2 "${RED}No $GPU_DETECT_JSON file exist${NOCOLOR}"
	fi
	sleep 10
done


check_gpu () {
	if [[ $nvidia_indexes_array == '[]' && $amd_indexes_array == '[]' ]]; then
		echo2 "No ${RED}AMD${NOCOLOR} or ${GREEN}NVIDIA${NOCOLOR} cards detected"
		exit 1
	fi

	[[ $nvidia_cards_number > 0 ]] &&
		echo2 "You have ${GREEN}NVIDIA${NOCOLOR} GPU's: $nvidia_cards_number" #&&
#	nvidia-smi -pm 1 > /dev/null 2>&1 && nvidia-settings -a GPUPowerMizerMode=1 > /dev/null 2>&1 #Useless and unnecessary command

	[[ $amd_cards_number > 0 ]] &&
		echo2 "You have ${RED}AMD${NOCOLOR} GPU's: $amd_cards_number"

	#check config
	if [ ! -f $AUTOFAN_CONF ]; then
		echo2 "${RED}No config $AUTOFAN_CONF${NOCOLOR}"
	fi
}



get_fan_speed () {
	local cur_temp=$1
	local prev_temp=$2
	local cur_fan_speed=$3
	local gpu_bus_id=$4
	local i=$5
	
	#checking var is natural number
	if [[ -z "${cur_temp##*[!0-9]*}" || -z "${cur_fan_speed##*[!0-9]*}" ]]; then
		if [[ $REBOOT_ON_ERROR == 1 ]]; then
			local msg="Autofan: error in temp readings, rebooting"
			local payload=`cat $GPU_STATS_JSON | jq -r -C .`
			echo "$payload" | message warning "$msg" payload
			nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
		else
			if [[ $error_in_temp_readings == 0 ]]; then
				local msg="Autofan: error in temp readings"
				local payload=`cat $GPU_STATS_JSON | jq -r -C .`
				echo "$payload" | message warning "$msg" payload
				error_in_temp_readings=1
			fi
		fi
		#break ??? not working in function
	fi

	if [[ ${saved[i]} -ne 0 ]]; then
	target_fan_speed=${saved[i]}
	else
	target_fan_speed=
	fi
	#check current temp and set fan speed
	if [[ $prev_temp -ne 0 && $cur_temp -gt $TARGET_TEMP ]]; then #current temp
		if [[ $cur_temp -lt $prev_temp ]]; then #adjustment from 2 degrees 
			target_fan_speed=$(( ${saved[i]}-1 ))
		elif [[ $cur_temp -ge $prev_temp ]]; then
			target_fan_speed=$(( ${saved[i]}+($cur_temp-$TARGET_TEMP-1) )) #minus in brackets
		fi 
	elif [[ $cur_temp -eq $TARGET_TEMP ]]; then
			target_fan_speed=$(( ${saved[i]}+3 ))
	elif [[ $(( $cur_temp-2)) -ge $TARGET_TEMP ]];then
			target_fan_speed=$(( ${saved[i]}+7 ))		
	elif [[ $prev_temp -ne 0 && $cur_temp -lt $TARGET_TEMP ]]; then
	echo "current rpm $cur_fan_speed,current target $target_fan_speed, next"
		if [[ $cur_temp -gt $prev_temp ]]; then #adjustment from 2 degrees
			target_fan_speed=$(( ${saved[i]}+1 ))
			#high speed adjustment if growing more then 2 degrees 
		[[ $(($cur_temp-2)) -gt $prev_temp ]] &&
				target_fan_speed=$(( ${saved[i]}+($cur_temp-$prev_temp) ))
		echo "current rpm $cur_fan_speed,current target $target_fan_speed, next"
		elif [[ $cur_temp -lt $prev_temp ]] && [[ $(($cur_temp+1)) -lt $TARGET_TEMP ]]; then
			target_fan_speed=$(( ${saved[i]}+($cur_temp-$TARGET_TEMP+1))) #+1 in brackets
		#elif [[ $(($cur_temp+2)) -le $TARGET_TEMP ]];then
		#	target_fan_speed=$(( ${saved[i]}-1)) 
		fi
	fi
echo "$target_fan_speed"
	#doing nothing
	[[ $cur_temp -eq $TARGET_TEMP || $prev_temp -eq 0 ]] && 
		target_fan_speed=${saved[i]}
	#+/-1 degree do nothing
	[[ $cur_temp -eq $(( $TARGET_TEMP+1 )) || $cur_temp -eq $(( $TARGET_TEMP-1 )) ]] && target_fan_speed=${saved[i]}

	#set MIN_FAN & MAX_FAN speed if needed
	[[ $target_fan_speed -lt $MIN_FAN ]] && target_fan_speed=$MIN_FAN
	[[ $target_fan_speed -gt $MAX_FAN ]] && target_fan_speed=$MAX_FAN

	#coloring and set sleep time
	echo_temp="$cur_temp°C"
	
	#sleep 3/4
	[[ $cur_temp -lt $TARGET_TEMP && $cur_temp -ne $(( $TARGET_TEMP-1 )) ]] && 
		echo_temp="${BLUE}$cur_temp°C${NOCOLOR}" && NEW_SLEEP_TIME=$(( $DEF_SLEEP_TIME/4*3 ))
	
	#sleep 1
	[[ $cur_temp -eq $(( $TARGET_TEMP-1 )) ]] && echo_temp="${CYAN}$cur_temp°C${NOCOLOR}"
	
	#sleep 1/3
	[[ $cur_temp -gt $TARGET_TEMP && $cur_temp -ne $(( $TARGET_TEMP+1 )) ]] && 
		echo_temp="${RED}$cur_temp°C${NOCOLOR}" && NEW_SLEEP_TIME=$(( $DEF_SLEEP_TIME/3 ))
	
	#sleep 1
	[[ $cur_temp -eq $(( $TARGET_TEMP+1 )) ]] && echo_temp="${YELLOW}$cur_temp°C${NOCOLOR}" 
	
	#less sleep_time
	[[ -n $NEW_SLEEP_TIME && $NEW_SLEEP_TIME -lt $SLEEP_TIME ]] && 
		SLEEP_TIME=$NEW_SLEEP_TIME && NEW_SLEEP_TIME=
	


#if AMD GPU
#	if [[ $6 != "Nvidia" ]]; then
#		if [[ $target_fan_speed -gt $cur_fan_speed ]]; then # need to increase fans
#			[[ $(( $target_fan_speed % 2 )) -eq 1 ]] &&
#				target_fan_speed=$(( $target_fan_speed+3 )) ||
#					target_fan_speed=$(( $target_fan_speed+2 ))
#		elif [[ $target_fan_speed -lt $cur_fan_speed ]]; then  # need to decrease fans
#			[[ $(( $target_fan_speed % 2 )) -eq 1 ]] &&
#				target_fan_speed=$(( $target_fan_speed+1 )) || 
#					target_fan_speed=$(( $target_fan_speed+2 ))
#		fi
		#we can get values like 102, simply cut off this
		[[ $target_fan_speed -gt $MAX_FAN ]] && target_fan_speed=$MAX_FAN
#	fi
#end_if_AMD


	#Just to make sure
	[[ $target_fan_speed -gt 100 ]] && target_fan_speed=100

	#if GPU disabled
	[[ -z $cur_temp ]] && target_fan_speed=$MAX_FAN


	### Output after all modifications of target_fan_speed

	echo_fan="$target_fan_speed%"
	[[ $target_fan_speed -gt $cur_fan_speed ]] &&
		echo_fan="${YELLOW}$target_fan_speed% ↑${NOCOLOR}"
	[[ $target_fan_speed -lt $cur_fan_speed ]] &&
		echo_fan="${GREEN}$target_fan_speed% ↓${NOCOLOR}"
	[[ $target_fan_speed -eq $MAX_FAN ]] &&
		echo_fan="${RED}$target_fan_speed%${NOCOLOR}"

	[[ $6 == "Nvidia" ]] &&
		gpu_info+="GPU $i ${GREEN}$6${NOCOLOR} [${gpu_bus_id}]: $echo_temp $echo_fan" ||
		gpu_info+="GPU $i ${RED}$6   ${NOCOLOR} [${gpu_bus_id}]: $echo_temp $echo_fan"

	gpu_info+="\n"

}


###
# What we must to do if temperature reached some limits
check_overheat() {
	if [[ $miner_stopped_by_overheat == 1 && ! `screen -ls | grep "miner"` ]]; then
#	if [[ true ]]; then
		local t
		local allisok=1
		for t in ${temperatures_array[@]}; do
			if [[ $t -ge $(( $CRITICAL_TEMP-20 )) ]]; then #cold enough to start miner again
				allisok=0
				break
			fi
		done
		if [[ $allisok == 1 ]]; then
			miner_stopped_by_overheat=0 #let's forget about this
			do_miner_action "miner-start"
			local msg="GPU cooled down, mining resumed"
			message ok "$msg"
			#echo2 "${GREEN}$msg${NOCOLOR}"
		fi
	elif [[ $miner_stopped_by_overheat == 0 ]]; then
		local t
		for t in ${temperatures_array[@]}; do
			#reboot on driver error
			if [[ $t -gt 120 ]]; then
				if [[ $REBOOT_ON_ERROR == 1 ]]; then
					local msg="Autofan: GPU temperature $t is unreal, driver error, rebooting"
					local payload=`cat $GPU_STATS_JSON | jq -r -C .`
					echo "$payload" | message warning "$msg" payload
					nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
				else
					if [[ $temperature_is_unreal == 0 ]]; then
						local msg="Autofan: GPU temperature $t is unreal, driver error"
						local payload=`cat $GPU_STATS_JSON | jq -r -C .`
						echo "$payload" | message warning "$msg" payload
						temperature_is_unreal=1
					fi
				fi
				break
			fi

			#stop on CRITICAL_TEMP
			if [[ $t -ge $CRITICAL_TEMP && $t -le 120 ]]; then #do not process temp 511, 460, etc
				miner_stopped_by_overheat=1
				do_miner_action "miner-stop"

				local msg="GPU reached ${CRITICAL_TEMP}°C"
				if [[ $CRITICAL_TEMP_ACTION == "reboot" ]]; then
					msg+=", rebooting"
				elif [[ $CRITICAL_TEMP_ACTION == "shutdown" ]]; then
					msg+=", shutting down"
				else
					msg+=", mining stopped"
				fi
				local payload=`cat $GPU_STATS_JSON | jq -r -C .`
				echo "$payload" | message warning "$msg" payload

				if [[ $CRITICAL_TEMP_ACTION == "reboot" ]]; then
					nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
				elif [[ $CRITICAL_TEMP_ACTION == "shutdown" ]]; then
					nohup bash -c 'sreboot shutdown' > /tmp/nohup.log 2>&1 &
				fi

				break
			fi
		done
	fi
}


do_miner_action() {
	case $1 in
		"miner-start")
			if [[ ! `screen -ls | grep "miner"` ]]; then
				miner start
				#echo2 "${GREEN}Miner started${NOCOLOR}"
			fi

			if [[ -f $RIG_CONF ]]; then
				. $RIG_CONF
				[[ $WD_ENABLED==1 ]] &&
					wd start
			fi
		;;

		"miner-stop")
			if [[ `screen -ls | grep "miner"` ]]; then
				miner stop
				wd stop
				#echo2 "${RED}Miner stopped${NOCOLOR}"
			fi
		;;
	esac
}



# TODO merge with amd_auto_fan_control
nvidia_auto_fan_control () {
	args=
	#set start index
	i=0
	for index in ${nvidia_indexes_array[@]}; do
		# TODO Theese fields maybe moved inside `get_fan_speed` replaced by on nvidia_indexes_array[@] as argument
		local gpu_temperature=${temperatures_array[index]}
		local gpu_temperature_previous=${temperatures_array_previous[index]}
		if [[ -z $gpu_temperature_previous ]]; then gpu_temperature_previous=0; fi
		local gpu_fan_speed=${fans_array[index]}
		local card_bus_id=${card_bus_ids_array[index]}
		local brand="Nvidia"
		#event_by_temperature $gpu_temperature
		#echo "get_fan_speed \"$gpu_temperature\" \"$gpu_temperature_previous\" \"$gpu_fan_speed\" \"$card_bus_id\" $i $brand"
		get_fan_speed "$gpu_temperature" "$gpu_temperature_previous" "$gpu_fan_speed" "$card_bus_id" $i $brand
		#not set fan_speed if not changed
		[[ -n $target_fan_speed && $target_fan_speed -ne $gpu_fan_speed ]] && 
			args+=" -a [gpu:$i]/GPUFanControlState=1 -a [fan:$i]/GPUTargetFanSpeed=$target_fan_speed"
		i=$(( $i+1 ))
	done
	#[[ -n $args ]] && nvidia-settings $args > /dev/null 2>&1
	if [[ -n $args ]]; then
		[[ $DEBUG_COMMANDS == 1 ]] && echo "nvidia-settings $args"
		timeout -s9 60 nvidia-settings $args > /dev/null 2>&1
		if [[ $? -ne 0 ]]; then
			if [[ $REBOOT_ON_ERROR == 1 ]]; then
				local msg="Autofan: unable to set fan speed, rebooting"
				message warning "$msg"
				nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
			else
				if [[ $unable_to_set_fan_speed == 0 ]]; then
					local msg="Autofan: unable to set fan speed"
					message warning "$msg"
				fi
			fi
			unable_to_set_fan_speed=1
		fi
	fi
}



amd_auto_fan_control () {
	for index in ${amd_indexes_array[@]}; do
		# TODO Theese fields maybe moved inside `get_fan_speed` replaced by on amd_indexes_array[@] as argument
		local gpu_temperature=${temperatures_array[index]}
		local gpu_temperature_previous=${temperatures_array_previous[index]}
		[[ -z $gpu_temperature_previous ]] && gpu_temperature_previous=0
		local gpu_fan_speed=${fans_array[index]}
		local card_bus_id=${card_bus_ids_array[index]}
		local brand="AMD   "
		#event_by_temperature $gpu_temperature
		#echo "get_fan_speed \"$gpu_temperature\" \"$gpu_temperature_previous\" \"$gpu_fan_speed\" \"$card_bus_id\" $index $brand"
		get_fan_speed "$gpu_temperature" "$gpu_temperature_previous" "$gpu_fan_speed" "$card_bus_id" $index $brand
		#not set fan_speed if not changed
		[[ $target_fan_speed -ne $gpu_fan_speed ]] &&
			[[ $DEBUG_COMMANDS == 1 ]] && echo "wolfamdctrl -i ${cardnum[index]} --set-fanspeed $target_fan_speed" && saved[index]=$target_fan_speed
			wolfamdctrl -i ${cardnum[index]} --set-fanspeed $target_fan_speed 1>/dev/null
		saved[index]=$target_fan_speed
	done
}


auto_fan_control() {
	while true;	do
		unset ENABLED
		TARGET_TEMP= #unset tt if it's not in config anymore
		CRITICAL_TEMP=
		CRITICAL_TEMP_ACTION=
		MIN_FAN=
		MAX_FAN=
		NO_AMD=
		REBOOT_ON_ERROR=
		
		[[ -f $AUTOFAN_CONF ]] && source $AUTOFAN_CONF

		#set default values
		[[ -z $TARGET_TEMP ]] && TARGET_TEMP=$DEF_TARGET_TEMP
		[[ -z $CRITICAL_TEMP ]] && CRITICAL_TEMP=$DEF_CRITICAL_TEMP
		[[ -z $CRITICAL_TEMP_ACTION ]] && CRITICAL_TEMP_ACTION=$DEF_CRITICAL_TEMP_ACTION
		[[ -z $MIN_FAN ]] && MIN_FAN=$DEF_MIN_FAN
		[[ -z $MAX_FAN ]] && MAX_FAN=$DEF_MAX_FAN
		[[ -z $NO_AMD ]] && NO_AMD=$DEF_NO_AMD
		[[ -z $REBOOT_ON_ERROR ]] && REBOOT_ON_ERROR=$DEF_REBOOT_ON_ERROR
		SLEEP_TIME=$DEF_SLEEP_TIME
		#fallback for old configurations without ENABLED in config
		[[ ! -v ENABLED && ! -z $TARGET_TEMP ]] && ENABLED=1 #if ENABLED var is not in config


		echo2 "${GREEN}$(date +"%Y-%m-%d %T")${NOCOLOR}"


		#trying to read data 3 times
		for read_count in {1..3}; do
			declare -a temperatures_array=(`cat $GPU_STATS_JSON | tail -1 | jq -r ".temp | .[]"`)
			#echo ${temperatures_array[@]}
			[[ -n $temperatures_array ]] && break
			echo2 "${RED}Can't get temperature data from gpu-stats ($read_count)${NOCOLOR}"
			if [[ $read_count -ne 3 ]]; then
				echo2 "${YELLOW}Waiting 5 seconds and will try one more time...${NOCOLOR}"
				read -t 5
			fi
		done

		#reboot if temperatures_array is empty
		if [[ -z $temperatures_array || $temperatures_array == 'null' ]]; then
			if [[ $REBOOT_ON_ERROR == 1 ]]; then
				local msg="GPU driver error, no temps, rebooting"
				local payload=`cat $GPU_STATS_JSON | jq -r -C .`
				echo "$payload" | message err "$msg" payload
				nohup bash -c 'sreboot' > /tmp/nohup.log 2>&1 &
			else
				if [[ $error_in_temp_readings == 0 ]]; then
					local msg="GPU driver error, no temps"
					local payload=`cat $GPU_STATS_JSON | jq -r -C .`
					echo "$payload" | message warning "$msg" payload
				fi
			fi
			error_in_temp_readings=1
			read -t $SLEEP_TIME
			continue
		fi


		#miner_stop will work
		check_overheat


		### waiting for the miner to work and if the miner does not work, wait for it a bit
		khs=
		for i in {1..12}; do #wait 60 seconds for miner then continue and wait again on next loop
			[[ -f $HASHRATE_KHS ]] && khs=$(cat $HASHRATE_KHS)
			[[ ! -z $khs && $khs != 0 ]] && break
			echo2 "${YELLOW}Waiting for the miner to start hashing${NOCOLOR}"
			read -t 5
		done


		#check if the .conf file exists
		if [[ -n $TARGET_TEMP && -f $AUTOFAN_CONF && -f $GPU_STATS_JSON ]]; then
			#MIN_TEMP=$(( TARGET_TEMP-5 ))

			if [[ $PREV_TARGET_TEMP != $TARGET_TEMP ||
				$PREV_CRITICAL_TEMP != $CRITICAL_TEMP || $PREV_CRITICAL_TEMP_ACTION != $CRITICAL_TEMP_ACTION ||
				$PREV_MIN_FAN != $MIN_FAN || $PREV_MAX_FAN != $MAX_FAN ]];
			then
				echo2 "${PURPLE}Target temp $TARGET_TEMP°C, Miner stop at $CRITICAL_TEMP°C, Min Fan $MIN_FAN%, Max Fan $MAX_FAN%${NOCOLOR}"
				PREV_TARGET_TEMP=$TARGET_TEMP
				PREV_CRITICAL_TEMP=$CRITICAL_TEMP
				PREV_CRITICAL_TEMP_ACTION=$CRITICAL_TEMP_ACTION
				PREV_MIN_FAN=$MIN_FAN
				PREV_MAX_FAN=$MAX_FAN
			fi

			declare -a fans_array=(`cat $GPU_STATS_JSON | tail -1 | jq -r ".fan | .[]"`)
			[[ $DEBUG_COMMANDS == 1 ]] && echo "Fans: ${fans_array[@]}"
			gpu_info=

			if (( $nvidia_cards_number > 0 )); then
				nvidia_auto_fan_control
			fi

			if [[ $amd_cards_number > 0 && $NO_AMD != 1 ]]; then #AMD control is not disabled
				amd_auto_fan_control
			fi

			echo2 "$gpu_info"

			declare -a temperatures_array_previous=(${temperatures_array[@]})
		fi


		#sleep $SLEEP_TIME
		#echo "SLEEP_TIME=$SLEEP_TIME"
		read -t $SLEEP_TIME
	done
}



case $1 in
	run)
		#check running
#		process_count=`ps aux | grep "autofan" | grep -v grep | grep -v $$ | wc -l`
#		if [[ $process_count -gt 1 ]]; then #this process and another
#			echo -e "${RED}Autofan is already running${NOCOLOR}\nRun ${CYAN}autofan screen${NOCOLOR} to open it"
#			exit 1
#		fi

		check_gpu
		auto_fan_control
	;;

	*)
		session_count=`screen -ls autofan | grep autofan | wc -l`
		if [[ $session_count > 0 ]]; then
			screen -x -S autofan
		else #start new screen
			screen -dm -S autofan autofan run
			echo2 "Autofan screen started"
		fi
	;;

esac
